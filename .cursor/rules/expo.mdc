---
description: 
globs: 
alwaysApply: true
---
# Guía de Estilo, Arquitectura y Convenciones del Proyecto (ClearByte) (ANDROID)

Este documento es la **fuente de verdad** para las convenciones de codificación, arquitectura y uso de librerías en ClearByte. Utiliza Expo (SDK 52), React Native (0.76), TypeScript, y un stack moderno incluyendo React Native Paper (v5), Zustand (v5), React Query (v5), y Apisauce (v3). **La aplicación soporta temas claro y oscuro**. La estructura del proyecto se basa en una separación clara entre código central/compartido (`src/app`) y módulos de funcionalidades específicas (`src/modules`).

**Objetivo:** Código limpio, mantenible, performante, y una excelente UX adaptable.

---

## 1. Estilo y Estructura del Código

*   **Concisión y Claridad:** Código `TypeScript` técnico y bien documentado donde sea necesario (JSDoc para funciones complejas o utilidades).
*   **Programación Funcional:** Funciones y hooks sobre clases. Patrones declarativos.
*   **Modularidad (DRY):** Crear componentes y hooks reutilizables. Colocar en `app/` si son globales, o dentro del módulo si son específicos.
*   **Nombres Descriptivos:** Variables y funciones con nombres claros (ej., `isLoading`, `isError`, `data`, `loginMutation`, `toggleTheme`, `handleLoginSubmit`).
*   **Estructura de Archivos (Organización por Módulos - Actual):**
    *   `src/`
        *   `app/`: Código central, compartido y transversal.
            *   `components/`: Componentes UI globales reutilizables.
                *   `common/`: Componentes muy genéricos (`GlobalSnackbar.tsx`).
                *   *(otros...)*: (ej., `StyledButton.tsx` si se crea)
            *   `constants/`: (A crear) Valores fijos globales (claves Storage, URLs base si no van en env).
            *   `hooks/`: (A crear) Hooks personalizados globales (ej., `useNetworkStatus`).
            *   `lib/`: (A crear) Utilidades generales globales (ej., helpers `date-fns`).
            *   `navigation/`: (A crear) Configuración de `react-navigation` raíz (Drawer, Stacks principales), tipos globales de navegación.
            *   `services/`: Configuración centralizada (`apiClient.ts`).
            *   `store/`: Stores globales de Zustand (`authStore.ts`, `themeStore.ts`, `snackbarStore.ts`).
            *   `styles/`: **TODA** la configuración de tema (`colors.ts`, `typography.ts`, `theme.ts` que exporta `useAppTheme`).
            *   `types/`: Definiciones TS globales (`env.d.ts`, `theme.types.ts`).
        *   `modules/`: Funcionalidades/dominios principales.
            *   `auth/`: Módulo de Autenticación (Existente).
                *   `components/`: `LoginForm.tsx`.
                *   `screens/`: `LoginScreen.tsx`.
                *   `services/`: `authService.ts` (usa `app/services/apiClient`).
                *   `types/`: `auth.types.ts` (contiene DTOs, Zod schemas, tipos de formulario/estado específicos de auth).
            *   *(otros módulos...)*: (ej., `orders/`, `menu/`, `settings/` a crear siguiendo la misma estructura interna según necesidad).
        *   `assets/`: Recursos estáticos (fuentes `.ttf`/`.otf`, imágenes `.png`/`.jpg`, Lottie `.json`). **Nota:** El logo (`src/assets/logo.png`) se importa típicamente con una ruta relativa como `require('@/assets/logo.png')` (si se configura alias) o `require('../../assets/logo.png')` desde un componente dentro de `src/modules/*/components/`.

---

## 2. Convenciones de Nomenclatura

*   **Directorios:** `kebab-case` (ej., `app/components/common`, `modules/auth`).
*   **Archivos (Componentes):** `PascalCase` (ej., `LoginForm.tsx`, `GlobalSnackbar.tsx`).
*   **Archivos (Otros):** `camelCase` (ej., `apiClient.ts`, `authStore.ts`, `theme.ts`). **Convención:** Usar `*.types.ts` para archivos de tipos dentro de los módulos (ej., `auth.types.ts`).
*   **Exportaciones:** Preferir `named exports`. Usar `export default` para componentes de pantalla (`screens`).

---

## 3. Uso de TypeScript

*   **Obligatorio:** `strict: true` en `tsconfig.json`.
*   **Interfaces vs Tipos:** `interface` para formas de objetos/props; `type` para uniones (`|`), intersecciones (`&`), alias, funciones.
*   **Evitar Enums:** Usar `as const` o `type` unions.
*   **Componentes Funcionales:** Tipar props (`interface Props`), retorno `JSX.Element` o `React.FC<Props>`.
*   **Validación con `zod` (v3):**
    *   **Uso:** Estándar para validar datos (formularios, DTOs API).
    *   **Definición:** Esquemas (`z.object`, `z.string`, etc.) en `*.types.ts` dentro del módulo correspondiente (ej., `modules/auth/types/auth.types.ts`).
    *   **Validación Formularios:** Usar con `react-hook-form` (v7) vía `@hookform/resolvers` (v5): `resolver: zodResolver(mySchema)`.
    *   **Inferencia:** **SIEMPRE** usar `z.infer<typeof mySchema>` para derivar tipos TS.
    ```typescript
    // src/modules/auth/types/auth.types.ts
    import { z } from 'zod';
    // Esquema para el form
    export const loginSchema = z.object({ emailOrUsername: z.string().min(1), /*...*/ });
    export type LoginFormInputs = z.infer<typeof loginSchema>;
    // Esquema para la respuesta API (DTO)
    export const loginResponseDtoSchema = z.object({ token: z.string(), /*...*/ });
    export type LoginResponseDto = z.infer<typeof loginResponseDtoSchema>;
    ```

---

## 4. Sintaxis y Formato

*   **`function` vs Arrow:** `function` para componentes/utilidades puras; `=>` para callbacks (`onPress`, `useEffect`), funciones internas.
*   **Concisión:** `&&` para renderizado condicional; evitar `{}` innecesarios.
*   **JSX Declarativo:** Extraer lógica compleja.
*   **ESLint + Prettier:** Configurados (`.eslintrc.js`, `.prettierrc.js`). Asegurar integración con editor y pre-commit hooks. Sigue las reglas definidas.

---

## 5. UI y Estilos

*   **Librería UI: `react-native-paper` (v5 - MD3)**
    *   Componentes base (`Button`, `TextInput`, `Surface`, `Text`, `IconButton`, etc.).
    *   **Theming:** Configuración centralizada en `src/app/styles/`.
        *   `colors.ts`: Paletas `lightColors`, `darkColors` (incluye `success`, `warning`, `info` y sus `Container`/`onContainer`).
        *   `typography.ts`: Define `typography` (usando `Platform.select` para fuentes base).
        *   `theme.ts`: Crea `lightTheme`, `darkTheme`. Extiende `MD3LightTheme`/`MD3DarkTheme` con colores y fuentes personalizadas. Define `spacing`, `roundness`. **Exporta `useAppTheme = () => useTheme<AppTheme>()` para acceso tipado.**
*   **Iconos: `@expo/vector-icons` (v14)**
    *   Usar nombres de icono directamente en props de Paper (ej., `icon="eye"`).
*   **Layout:** `Flexbox` vía `StyleSheet` de React Native.
*   **Modo Claro/Oscuro:**
    *   **Gestión:** `src/app/store/themeStore.ts` (Zustand). Guarda `themePreference` en `AsyncStorage`. Determina `activeTheme`.
    *   **Detección Sistema:** `useSystemThemeDetector` (en `themeStore.ts`) usa `useColorScheme`. Llamar una vez en `App.tsx`.
    *   **Aplicación en Componentes:**
        *   Obtener tema: `const theme = useAppTheme();` (importado de `src/app/styles/theme`).
        *   Estilos: **SIEMPRE** usar `theme.colors.*`, `theme.fonts.*`, `theme.spacing.*`, `theme.roundness` en `StyleSheet.create`.
        *   Memoización: Si los estilos dependen del tema dentro de un componente, usar `React.useMemo`: `const styles = React.useMemo(() => StyleSheet.create({...}), [theme]);`.
        *   **PROHIBIDO Hardcodear Colores:** No usar `'#FFF'`, `'black'`, etc.
    *   **Proveedor Raíz:** `PaperProvider` en `App.tsx` con `theme={activeTheme}`.
*   **Accesibilidad (a11y):** Props `accessibility*`. Buen contraste en `colors.ts`. Testear.
*   **Animaciones:**
    *   Navegación/Gestos: `react-native-reanimated` (v3), `react-native-gesture-handler` (v2) (Dependencias de Navigation).
    *   Indicadores/UX: `lottie-react-native` (v7) para animaciones Lottie.

---

## 6. Gestión del Área Segura (Safe Area)

*   **Proveedor:** `SafeAreaProvider` de `react-native-safe-area-context` (v4) en la raíz.
*   **Uso:** `SafeAreaView` de `react-native-safe-area-context` como contenedor principal en pantallas (`src/modules/*/screens/*`).

---

## 7. Optimización del Rendimiento

*   **Estado Servidor: `@tanstack/react-query` (v5)**
    *   **Obligatorio:** Para toda data fetching/mutation.
    *   **Uso:** `useQuery` (fetch), `useMutation` (CUD). `queryKey` descriptivos. `queryClient.invalidateQueries` en `onSuccess` de mutaciones. `QueryClientProvider` en raíz.
*   **Estado Global Cliente: `zustand` (v5)**
    *   **Uso:** Estado global no-servidor.
    *   **Stores:** En `src/app/store/` (`authStore`, `themeStore`, `snackbarStore`).
    *   **Persistencia:** `persist` middleware (`zustand/middleware`) con `createJSONStorage(() => EncryptedStorage)`. Usado en `themeStore` y `authStore`.
*   **Imágenes: `expo-image` (v2)**
    *   Usar sobre `react-native` `<Image>`. Proporcionar `width`, `height`. Beneficios de caching/formato (WebP).
*   **Renderizados:** `React.memo`, `useMemo` (para estilos/cálculos), `useCallback` con moderación.
*   **Listas:** `FlatList`/`SectionList`. `keyExtractor`. `extraData={theme}` si es necesario.
*   **Inicio App:** `expo-splash-screen` (no listado pero recomendado).

---

## 8. Navegación

*   **Librería: `react-navigation` (v7)**
    *   Dependencias: `@react-navigation/native`, `@react-navigation/native-stack` (v7), `@react-navigation/drawer` (v7) (u otros navegadores).
    *   **Configuración:** Principal en `src/app/navigation/`.
    *   **Theming:** Aplicar colores/fuentes de `useAppTheme` en `screenOptions`.
*   **Dependencias Clave:** `react-native-screens` (v4), `react-native-gesture-handler` (v2), `react-native-safe-area-context` (v4).
*   **Tipado:** Rutas y parámetros en `src/app/navigation/types.ts` (globales) o `src/modules/*/navigation/types.ts` (específicos).
*   **URL Polyfill:** `react-native-url-polyfill` (v2) está instalado, puede ser necesario para algunas librerías o APIs web.

---

## 9. Comunicación con API

*   **Cliente HTTP: `apisauce` (v3)**
    *   **Configuración Central:** `src/app/services/apiClient.ts`.
        *   `baseURL` desde `@env` (`API_URL`).
        *   Interceptor (`addAsyncRequestTransform`) para añadir `Authorization: Bearer <token>` (token leído desde `EncryptedStorage`).
        *   Monitor (`addMonitor`) para 401 (llama a `authStore.logout`) y logueo de otros errores (`!response.ok`).
    *   **Servicios Específicos:** En `src/modules/*/services/` (ej., `authService.ts`). Importan y usan `apiClient` central. Lanzan errores (`throw new Error(...)`) en caso de fallo para React Query.
*   **Variables de Entorno:** Usar `react-native-dotenv`. Definir tipos en `src/app/types/env.d.ts`. Acceder con `import { VAR_NAME } from '@env';`. **Variables actuales:** `API_URL`, `API_KEY`, `ENVIRONMENT`, `VERSION`, `BUILD_NUMBER`.

---

## 10. Manejo de Formularios

*   **Librería: `react-hook-form` (v7)**
    *   Usar `useForm`, `Controller`.
*   **Validación:** `zod` (v3) + `@hookform/resolvers` (v5) `zodResolver`. Esquemas en `src/modules/*/types/*.types.ts`.
*   **UI:** Inputs de `react-native-paper`. `HelperText type="error"` para mostrar errores de `formState.errors`.

---

## 11. Manejo de Errores
Se implementa una estrategia estandarizada para el manejo de errores, especialmente los provenientes de la API, con el objetivo de proporcionar feedback claro y consistente al usuario, facilitar la depuración y mantener el código desacoplado.

**Validación en Formularios:**
*   Se utiliza `zod` junto con `react-hook-form` (`@hookform/resolvers`) para la validación del lado del cliente antes de enviar datos a la API.
*   Los errores de validación de Zod se muestran directamente en la UI usando el estado `formState.errors` de `react-hook-form` y el componente `HelperText` de `react-native-paper`.

**Errores de API (Flujo Estandarizado):**
*   **Contrato Backend:** Se espera que el backend devuelva errores HTTP (4xx, 5xx) con una estructura JSON consistente:
    ```json
    {
      "statusCode": number, // ej. 422, 401, 500
      "code": string,       // ej. "AUTH_DUPLICATE_EMAIL", "RESOURCE_NOT_FOUND"
      "message": string,    // Mensaje descriptivo (para logs/fallback)
      "details": any        // Opcional: Detalles extra (ej. errores de validación por campo)
    }
    ```
    El campo `code` es crucial para la identificación única del error en el frontend.
*   **Componentes Frontend Clave:**
    *   `src/app/types/api.types.ts`: Define la interfaz `BackendErrorResponse` que coincide con la estructura del error del backend.
    *   `src/app/constants/apiErrorCodes.ts`: Define un objeto `ERROR_CODES` (`as const`) que enumera todos los códigos de error conocidos que el backend puede devolver. Debe mantenerse sincronizado con el backend.
    *   `src/app/lib/errors.ts`: Define la clase `ApiError extends Error`. Esta clase encapsula la información del error (`code`, `status`, `details`, `originalMessage`) recibida de la API. Incluye un método estático `ApiError.fromApiResponse(responseData, responseStatus)` para facilitar su creación desde la respuesta de `apisauce`.
    *   `src/app/services/apiClient.ts`: Cliente `apisauce` configurado.
        *   **Interceptor de Token:** Añade automáticamente el token de autenticación a las peticiones.
        *   **Monitor 401:** Detecta respuestas 401 Unauthorized (excepto en rutas de autenticación) y dispara el logout del `authStore`.
        *   **Monitor de Logs:** Loguea en consola (`console.error`) información detallada sobre peticiones fallidas (`!response.ok`), incluyendo el `response.problem` detectado por `apisauce` y los datos (`response.data`) recibidos. **Importante:** Este monitor solo loguea, no lanza errores ni maneja la UI.
    *   **Servicios (`src/modules/*/services/*.ts`):**
        *   Responsables de realizar las llamadas a la API usando `apiClient`.
        *   En caso de respuesta no exitosa (`!response.ok`), **DEBEN** capturar la respuesta y lanzar una instancia de `ApiError` usando `throw ApiError.fromApiResponse(response.data, response.status)`. Esto asegura que el error estructurado llegue a React Query.
    *   `src/app/lib/errorMapping.ts`:
        *   Contiene el mapeo `errorCodeMessages` que asocia cada `ApiErrorCode` con un mensaje descriptivo en español. (Actualmente NO utiliza i18n).
        *   Exporta la función `getApiErrorMessage(error: unknown)`:
            *   Recibe el error capturado (puede ser `ApiError`, `AxiosError`, `Error`, etc.).
            *   Intenta obtener un mensaje del mapeo `errorCodeMessages` usando `error.code` (si es `ApiError`).
            *   Si no encuentra un mensaje específico para el código, intenta buscar uno genérico basado en el `error.status` (ej., `status_404`).
            *   Como último recurso, utiliza el `error.originalMessage` (mensaje del backend) o un mensaje por defecto.
            *   También maneja errores de red comunes.
*   **React Query (`useMutation`, `useQuery`):**
    *   El callback `onError(error)` captura el error lanzado por el servicio (que ahora debería ser una instancia de `ApiError` para errores de API).
    *   Dentro de `onError`, se llama a `getApiErrorMessage(error)` para obtener el mensaje final que se mostrará al usuario.
*   **UI Feedback (`src/app/store/snackbarStore.ts`, `src/app/components/common/GlobalSnackbar.tsx`):**
    *   El `onError` utiliza `useSnackbarStore().showSnackbar()` para mostrar el mensaje obtenido de `getApiErrorMessage` en el `GlobalSnackbar`.

**Flujo Resumido de Error de API:**
1.  Backend responde con error HTTP + JSON (`{statusCode, code, message, ...}`).
2.  `apiClient` (`apisauce`) recibe la respuesta. El monitor puede loguear el `response.problem` y los `response.data`.
3.  El método del Servicio (ej. `authService.register`) recibe la respuesta no-ok.
4.  El Servicio lanza `throw ApiError.fromApiResponse(response.data, response.status)`.
5.  React Query (`useMutation`) captura el `ApiError` en su callback `onError`.
6.  `onError` llama a `getApiErrorMessage(error)`.
7.  `getApiErrorMessage` busca en `errorCodeMessages` usando `error.code` o `error.status` y devuelve un string en español.
8.  `onError` llama a `showSnackbar({ message: userMessage, type: 'error' })`.
9.  `GlobalSnackbar` muestra el mensaje al usuario.

**Errores de Red:**
*   `apisauce` detecta problemas de red (`NETWORK_ERROR`, `TIMEOUT_ERROR`, etc.) y los reporta en `response.problem`.
*   La función `getApiErrorMessage` también intenta detectar errores de red comunes (ej., `Network request failed`) directamente desde el objeto `Error` o `AxiosError`.
*   Se mapean a un mensaje genérico de error de red definido en `errorCodeMessages`.

**Errores Inesperados (Runtime):**
*   Se recomienda usar un componente `ErrorBoundary` a nivel superior de la aplicación para capturar errores de renderizado o síncronos inesperados en React, evitando que la app crashee por completo.
*   Los errores genéricos `Error` capturados en `onError` o por `ErrorBoundary` pueden mostrar su `error.message` si es relevante, o un mensaje genérico obtenido de `getApiErrorMessage`.

**Conectividad:**
*   Se puede usar `@react-native-community/netinfo` (instalado) para verificar el estado de la red antes de intentar una petición o para mostrar un mensaje persistente si no hay conexión. (Se recomienda crear un hook/store global en `src/app/` para esto).

**Logging:**
*   Se utiliza `console.error` para loguear detalles técnicos de los errores en `apiClient` y en los callbacks `onError`.
*   Para producción, se recomienda fuertemente integrar un servicio de monitoreo de errores como Sentry (`@sentry/react-native`) para capturar y analizar errores de forma centralizada.

---

## 12. Funcionalidades Nativas y Hardware

*   **Almacenamiento:**
    *   **Datos Sensibles (Tokens):** `react-native-encrypted-storage` (v4) (usado por `authStore`). **Requiere `expo-dev-client`**.
*   **Librerías Expo/Comunidad Instaladas:**
    *   `@expo/vector-icons`: Iconos.
    *   `@react-native-community/datetimepicker`: Selector Fecha/Hora nativo. **Requiere `expo-dev-client`**.
    *   `@react-native-community/netinfo`: Estado de red. **Requiere `expo-dev-client`**.
    *   `expo-audio`: Reproducción de audio.
    *   `expo-file-system`: Acceso a archivos.
    *   `expo-image`: Componente de imagen optimizado.
    *   `expo-image-picker`: Selección/toma de imágenes.
    *   `expo-notifications`: Notificaciones Push/Locales.
    *   `expo-print`: Generación PDF / Impresión estándar OS.
    *   `expo-status-bar`: Control barra de estado.
*   **Permisos:** Solicitar just-in-time usando las APIs de los módulos Expo.

---

## 13. Build y Desarrollo

*   **Development Builds:** **`expo-dev-client` (v5) es OBLIGATORIO** debido a las dependencias nativas (`encrypted-storage`, `netinfo`, `datetimepicker`). Workflow: `eas build -p development` / `npx expo run:*`, luego `npx expo start --dev-client`.
*   **EAS Build:** Usar para todos los tipos de build. Gestionar secretos/variables de entorno con **EAS Secrets**.
*   **Expo Updates:** Configurar `expo-updates` para actualizaciones OTA.

---

## 14. Utilidades Adicionales

*   **Fechas/Horas: `date-fns` (v4)**
    *   Uso estándar. Helpers en `src/app/lib/`.

---

## 15. Seguridad

*   **HTTPS:** Asegurado en `apiClient` (`API_URL` debe ser HTTPS).
*   **Tokens:** Almacenamiento seguro (`EncryptedStorage`), transmisión segura (Interceptor).
*   **Validación:** `zod`.
*   **Secretos:** Usar **EAS Secrets** + `@env`. **NO hardcodear `API_KEY` u otros secretos.**
*   **Dependencias:** Mantener actualizadas (`npm outdated`, `npm audit`).

---

## 16. Estructura para Nuevos Features/Módulos

1.  **Crear Carpeta:** `src/modules/newFeatureName/`.
2.  **Añadir Subcarpetas:** `components/`, `screens/`, `services/`, `types/`, etc., según necesidad.
3.  **Integrar:** Añadir pantallas a `src/app/navigation/`, usar elementos de `src/app/`, importar elementos internos del módulo.

## 17. Dependencias (package.json)

```json
{
  "name": "pizza",
  "version": "1.0.0",
  "main": "index.ts",
  "scripts": {
    "start": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.4",
    "@hookform/resolvers": "^5.0.1",
    "@react-native-community/datetimepicker": "8.2.0",
    "@react-native-community/netinfo": "^11.4.1",
    "@react-navigation/drawer": "^7.3.8",
    "@react-navigation/native": "^7.1.5",
    "@react-navigation/native-stack": "^7.3.9",
    "@tanstack/react-query": "^5.72.1",
    "apisauce": "^3.1.1",
    "axios": "^1.8.4",
    "date-fns": "^4.1.0",
    "dotenv": "^16.4.7",
    "expo": "~52.0.43",
    "expo-audio": "^0.3.5",
    "expo-crypto": "^14.0.2",
    "expo-dev-client": "~5.0.19",
    "expo-file-system": "~18.0.12",
    "expo-image": "~2.0.7",
    "expo-image-picker": "^16.0.6",
    "expo-notifications": "^0.29.14",
    "expo-print": "~14.0.3",
    "expo-status-bar": "~2.0.1",
    "lottie-react-native": "7.1.0",
    "react": "18.3.1",
    "react-hook-form": "^7.55.0",
    "react-native": "0.76.9",
    "react-native-encrypted-storage": "^4.0.3",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-paper": "^5.13.1",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "^4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-url-polyfill": "^2.0.0",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/lodash": "^4.17.16",
    "@types/react": "~18.3.12",
    "@typescript-eslint/eslint-plugin": "^7.13.1",
    "@typescript-eslint/parser": "^7.13.1",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-react": "^7.34.3",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-native": "^4.1.0",
    "react-native-dotenv": "^3.4.11",
    "typescript": "^5.3.3"
  },
  "private": true
}
```

