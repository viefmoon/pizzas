
# Guía de Estilo, Arquitectura y Convenciones del Proyecto (ClearByte) (ANDROID)

Este documento es la **fuente de verdad** para las convenciones de codificación, arquitectura y uso de librerías en ClearByte. Utiliza Expo (SDK 52), React Native (0.76), TypeScript, y un stack moderno incluyendo React Native Paper (v5), Zustand (v5), React Query (v5), y Apisauce (v3). **La aplicación soporta temas claro y oscuro**. La estructura del proyecto se basa en una separación clara entre código central/compartido (`src/app`) y módulos de funcionalidades específicas (`src/modules`).

**Objetivo:** Código limpio, mantenible, performante, y una excelente UX adaptable.

---

## 1. Estilo y Estructura del Código

*   **Concisión y Claridad:** Código `TypeScript` técnico y bien documentado donde sea necesario (JSDoc para funciones complejas o utilidades).
*   **Programación Funcional:** Funciones y hooks sobre clases. Patrones declarativos.
*   **Modularidad (DRY):** Crear componentes y hooks reutilizables. Colocar en `app/` si son globales, o dentro del módulo si son específicos.
*   **Nombres Descriptivos:** Variables y funciones con nombres claros (ej., `isLoading`, `isError`, `data`, `loginMutation`, `toggleTheme`, `handleLoginSubmit`).
*   **Estructura de Archivos (Organización por Módulos - Actual):**
    *   `src/`
        *   `app/`: Código central, compartido y transversal.
            *   `components/`: Componentes UI globales reutilizables.
                *   `common/`: Componentes muy genéricos (`GlobalSnackbar.tsx`).
                *   *(otros...)*: (ej., `StyledButton.tsx` si se crea)
            *   `constants/`: (A crear) Valores fijos globales (claves Storage, URLs base si no van en env).
            *   `hooks/`: (A crear) Hooks personalizados globales (ej., `useNetworkStatus`).
            *   `lib/`: (A crear) Utilidades generales globales (ej., helpers `date-fns`).
            *   `navigation/`: (A crear) Configuración de `react-navigation` raíz (Drawer, Stacks principales), tipos globales de navegación.
            *   `services/`: Configuración centralizada (`apiClient.ts`).
            *   `store/`: Stores globales de Zustand (`authStore.ts`, `themeStore.ts`, `snackbarStore.ts`).
            *   `styles/`: **TODA** la configuración de tema (`colors.ts`, `typography.ts`, `theme.ts` que exporta `useAppTheme`).
            *   `types/`: Definiciones TS globales (`env.d.ts`, `theme.types.ts`).
        *   `modules/`: Funcionalidades/dominios principales.
            *   `auth/`: Módulo de Autenticación (Existente).
                *   `components/`: `LoginForm.tsx`.
                *   `screens/`: `LoginScreen.tsx`.
                *   `services/`: `authService.ts` (usa `app/services/apiClient`).
                *   `types/`: `auth.types.ts` (contiene DTOs, Zod schemas, tipos de formulario/estado específicos de auth).
            *   *(otros módulos...)*: (ej., `orders/`, `menu/`, `settings/` a crear siguiendo la misma estructura interna según necesidad).
        *   `assets/`: (A crear) Recursos estáticos (fuentes `.ttf`/`.otf`, imágenes `.png`/`.jpg`, Lottie `.json`). **Nota:** El logo actualmente se importa con `require('../../../assets/logo.png')` en `LoginScreen`, asegúrate de que la carpeta `assets` esté en la raíz de `src/` o ajusta la ruta.

---

## 2. Convenciones de Nomenclatura

*   **Directorios:** `kebab-case` (ej., `app/components/common`, `modules/auth`).
*   **Archivos (Componentes):** `PascalCase` (ej., `LoginForm.tsx`, `GlobalSnackbar.tsx`).
*   **Archivos (Otros):** `camelCase` (ej., `apiClient.ts`, `authStore.ts`, `theme.ts`). **Convención:** Usar `*.types.ts` para archivos de tipos dentro de los módulos (ej., `auth.types.ts`).
*   **Exportaciones:** Preferir `named exports`. Usar `export default` para componentes de pantalla (`screens`).

---

## 3. Uso de TypeScript

*   **Obligatorio:** `strict: true` en `tsconfig.json`.
*   **Interfaces vs Tipos:** `interface` para formas de objetos/props; `type` para uniones (`|`), intersecciones (`&`), alias, funciones.
*   **Evitar Enums:** Usar `as const` o `type` unions.
*   **Componentes Funcionales:** Tipar props (`interface Props`), retorno `JSX.Element` o `React.FC<Props>`.
*   **Validación con `zod` (v3):**
    *   **Uso:** Estándar para validar datos (formularios, DTOs API).
    *   **Definición:** Esquemas (`z.object`, `z.string`, etc.) en `*.types.ts` dentro del módulo correspondiente (ej., `modules/auth/types/auth.types.ts`).
    *   **Validación Formularios:** Usar con `react-hook-form` (v7) vía `@hookform/resolvers` (v5): `resolver: zodResolver(mySchema)`.
    *   **Inferencia:** **SIEMPRE** usar `z.infer<typeof mySchema>` para derivar tipos TS.
    ```typescript
    // src/modules/auth/types/auth.types.ts
    import { z } from 'zod';
    // Esquema para el form
    export const loginSchema = z.object({ emailOrUsername: z.string().min(1), /*...*/ });
    export type LoginFormInputs = z.infer<typeof loginSchema>;
    // Esquema para la respuesta API (DTO)
    export const loginResponseDtoSchema = z.object({ token: z.string(), /*...*/ });
    export type LoginResponseDto = z.infer<typeof loginResponseDtoSchema>;
    ```

---

## 4. Sintaxis y Formato

*   **`function` vs Arrow:** `function` para componentes/utilidades puras; `=>` para callbacks (`onPress`, `useEffect`), funciones internas.
*   **Concisión:** `&&` para renderizado condicional; evitar `{}` innecesarios.
*   **JSX Declarativo:** Extraer lógica compleja.
*   **ESLint + Prettier:** Configurados (`.eslintrc.js`, `.prettierrc.js`). Asegurar integración con editor y pre-commit hooks. Sigue las reglas definidas.

---

## 5. UI y Estilos

*   **Librería UI: `react-native-paper` (v5 - MD3)**
    *   Componentes base (`Button`, `TextInput`, `Surface`, `Text`, `IconButton`, etc.).
    *   **Theming:** Configuración centralizada en `src/app/styles/`.
        *   `colors.ts`: Paletas `lightColors`, `darkColors` (incluye `success`, `warning`, `info` y sus `Container`/`onContainer`).
        *   `typography.ts`: Define `typography` (usando `Platform.select` para fuentes base).
        *   `theme.ts`: Crea `lightTheme`, `darkTheme`. Extiende `MD3LightTheme`/`MD3DarkTheme` con colores y fuentes personalizadas. Define `spacing`, `roundness`. **Exporta `useAppTheme = () => useTheme<AppTheme>()` para acceso tipado.**
*   **Iconos: `@expo/vector-icons` (v14)**
    *   Usar nombres de icono directamente en props de Paper (ej., `icon="eye"`).
*   **Layout:** `Flexbox` vía `StyleSheet` de React Native.
*   **Modo Claro/Oscuro:**
    *   **Gestión:** `src/app/store/themeStore.ts` (Zustand). Guarda `themePreference` en `AsyncStorage`. Determina `activeTheme`.
    *   **Detección Sistema:** `useSystemThemeDetector` (en `themeStore.ts`) usa `useColorScheme`. Llamar una vez en `App.tsx`.
    *   **Aplicación en Componentes:**
        *   Obtener tema: `const theme = useAppTheme();` (importado de `src/app/styles/theme`).
        *   Estilos: **SIEMPRE** usar `theme.colors.*`, `theme.fonts.*`, `theme.spacing.*`, `theme.roundness` en `StyleSheet.create`.
        *   Memoización: Si los estilos dependen del tema dentro de un componente, usar `React.useMemo`: `const styles = React.useMemo(() => StyleSheet.create({...}), [theme]);`.
        *   **PROHIBIDO Hardcodear Colores:** No usar `'#FFF'`, `'black'`, etc.
    *   **Proveedor Raíz:** `PaperProvider` en `App.tsx` con `theme={activeTheme}`.
*   **Accesibilidad (a11y):** Props `accessibility*`. Buen contraste en `colors.ts`. Testear.
*   **Animaciones:**
    *   Navegación/Gestos: `react-native-reanimated` (v3), `react-native-gesture-handler` (v2) (Dependencias de Navigation).
    *   Indicadores/UX: `lottie-react-native` (v7) para animaciones Lottie.

---

## 6. Gestión del Área Segura (Safe Area)

*   **Proveedor:** `SafeAreaProvider` de `react-native-safe-area-context` (v4) en la raíz.
*   **Uso:** `SafeAreaView` de `react-native-safe-area-context` como contenedor principal en pantallas (`src/modules/*/screens/*`).

---

## 7. Optimización del Rendimiento

*   **Estado Servidor: `@tanstack/react-query` (v5)**
    *   **Obligatorio:** Para toda data fetching/mutation.
    *   **Uso:** `useQuery` (fetch), `useMutation` (CUD). `queryKey` descriptivos. `queryClient.invalidateQueries` en `onSuccess` de mutaciones. `QueryClientProvider` en raíz.
*   **Estado Global Cliente: `zustand` (v5)**
    *   **Uso:** Estado global no-servidor.
    *   **Stores:** En `src/app/store/` (`authStore`, `themeStore`, `snackbarStore`).
    *   **Persistencia:** `persist` middleware (`zustand/middleware`) con `createJSONStorage(() => AsyncStorage)` o `EncryptedStorage`. Usado en `themeStore` con `AsyncStorage`.
*   **Imágenes: `expo-image` (v2)**
    *   Usar sobre `react-native` `<Image>`. Proporcionar `width`, `height`. Beneficios de caching/formato (WebP).
*   **Renderizados:** `React.memo`, `useMemo` (para estilos/cálculos), `useCallback` con moderación.
*   **Listas:** `FlatList`/`SectionList`. `keyExtractor`. `extraData={theme}` si es necesario.
*   **Inicio App:** `expo-splash-screen` (no listado pero recomendado).

---

## 8. Navegación

*   **Librería: `react-navigation` (v7)**
    *   Dependencias: `@react-navigation/native`, `@react-navigation/native-stack` (v7), `@react-navigation/drawer` (v7) (u otros navegadores).
    *   **Configuración:** Principal en `src/app/navigation/`.
    *   **Theming:** Aplicar colores/fuentes de `useAppTheme` en `screenOptions`.
*   **Dependencias Clave:** `react-native-screens` (v4), `react-native-gesture-handler` (v2), `react-native-safe-area-context` (v4).
*   **Tipado:** Rutas y parámetros en `src/app/navigation/types.ts` (globales) o `src/modules/*/navigation/types.ts` (específicos).
*   **URL Polyfill:** `react-native-url-polyfill` (v2) está instalado, puede ser necesario para algunas librerías o APIs web.

---

## 9. Comunicación con API

*   **Cliente HTTP: `apisauce` (v3)**
    *   **Configuración Central:** `src/app/services/apiClient.ts`.
        *   `baseURL` desde `@env` (`API_URL`).
        *   Interceptor (`addAsyncRequestTransform`) para añadir `Authorization: Bearer <token>` (token leído desde `EncryptedStorage`).
        *   Monitor (`addMonitor`) para 401 (llama a `authStore.logout`) y logueo de otros errores (`!response.ok`).
    *   **Servicios Específicos:** En `src/modules/*/services/` (ej., `authService.ts`). Importan y usan `apiClient` central. Lanzan errores (`throw new Error(...)`) en caso de fallo para React Query.
*   **Variables de Entorno:** Usar `react-native-dotenv`. Definir tipos en `src/app/types/env.d.ts`. Acceder con `import { VAR_NAME } from '@env';`. **Variables actuales:** `API_URL`, `API_KEY`, `ENVIRONMENT`, `VERSION`, `BUILD_NUMBER`.

---

## 10. Manejo de Formularios

*   **Librería: `react-hook-form` (v7)**
    *   Usar `useForm`, `Controller`.
*   **Validación:** `zod` (v3) + `@hookform/resolvers` (v5) `zodResolver`. Esquemas en `src/modules/*/types/*.types.ts`.
*   **UI:** Inputs de `react-native-paper`. `HelperText type="error"` para mostrar errores de `formState.errors`.

---

## 11. Manejo de Errores

*   **Validación:** `zod` en formularios.
*   **API:** React Query (`isError`, `error`, `onError` en `useMutation`). `GlobalSnackbar` (vía `snackbarStore`) para feedback. Monitor 401 en `apiClient`.
*   **Runtime:** `ErrorBoundary`.
*   **Conectividad: `@react-native-community/netinfo` (v11)**. Hook/store en `src/app/`.
*   **Logging:** Sentry (recomendado).

---

## 12. Funcionalidades Nativas y Hardware

*   **Almacenamiento:**
    *   **Preferencias No Sensibles:** `@react-native-async-storage/async-storage` (v2) (usado por `themeStore`).
    *   **Datos Sensibles (Tokens):** `react-native-encrypted-storage` (v4) (usado por `authStore`). **Requiere `expo-dev-client`**.
*   **Librerías Expo/Comunidad Instaladas:**
    *   `@expo/vector-icons`: Iconos.
    *   `@react-native-community/datetimepicker`: Selector Fecha/Hora nativo. **Requiere `expo-dev-client`**.
    *   `@react-native-community/netinfo`: Estado de red. **Requiere `expo-dev-client`**.
    *   `expo-audio`: Reproducción de audio.
    *   `expo-file-system`: Acceso a archivos.
    *   `expo-image`: Componente de imagen optimizado.
    *   `expo-image-picker`: Selección/toma de imágenes.
    *   `expo-notifications`: Notificaciones Push/Locales.
    *   `expo-print`: Generación PDF / Impresión estándar OS.
    *   `expo-status-bar`: Control barra de estado.
*   **Permisos:** Solicitar just-in-time usando las APIs de los módulos Expo.

---

## 13. Build y Desarrollo

*   **Development Builds:** **`expo-dev-client` (v5) es OBLIGATORIO** debido a las dependencias nativas (`encrypted-storage`, `netinfo`, `datetimepicker`). Workflow: `eas build -p development` / `npx expo run:*`, luego `npx expo start --dev-client`.
*   **EAS Build:** Usar para todos los tipos de build. Gestionar secretos/variables de entorno con **EAS Secrets**.
*   **Expo Updates:** Configurar `expo-updates` para actualizaciones OTA.

---

## 14. Utilidades Adicionales

*   **Fechas/Horas: `date-fns` (v4)**
    *   Uso estándar. Helpers en `src/app/lib/`.

---

## 15. Seguridad

*   **HTTPS:** Asegurado en `apiClient` (`API_URL` debe ser HTTPS).
*   **Tokens:** Almacenamiento seguro (`EncryptedStorage`), transmisión segura (Interceptor).
*   **Validación:** `zod`.
*   **Secretos:** Usar **EAS Secrets** + `@env`. **NO hardcodear `API_KEY` u otros secretos.**
*   **Dependencias:** Mantener actualizadas (`npm outdated`, `npm audit`).

---

## 16. Estructura para Nuevos Features/Módulos

1.  **Crear Carpeta:** `src/modules/newFeatureName/`.
2.  **Añadir Subcarpetas:** `components/`, `screens/`, `services/`, `types/`, etc., según necesidad.
3.  **Integrar:** Añadir pantallas a `src/app/navigation/`, usar elementos de `src/app/`, importar elementos internos del módulo.